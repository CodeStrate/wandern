from wandern.constants import (
    REGEX_MIGRATION_PARSER,
    DEFAULT_FILE_FORMAT,
    DEFAULT_MIGRATION_TABLE,
    DEFAULT_CONFIG_FILENAME,
)


def test_basic_migration_regex_parsing():
    """Test parsing a basic migration file with all required fields."""
    migration_content = """/*
    Autogenerated by Wandern, please add your migration SQL here.

    Timestamp: 2024-11-19 00:55:16

    Revision ID: 0002
    Revises: 0001
    Message: create table 2
    */

    -- UP

    -- DOWN
    """
    match = REGEX_MIGRATION_PARSER.search(migration_content)
    assert match is not None
    assert match.group("timestamp") == "2024-11-19 00:55:16"
    assert match.group("revision_id") == "0002"
    assert match.group("revises") == "0001"
    assert match.group("message") == "create table 2"
    assert match.group("tags") is None
    assert match.group("author") is None
    assert match.group("up_sql").strip() == ""
    assert match.group("down_sql").strip() == ""


def test_migration_with_tags_and_author():
    """Test parsing migration with optional tags and author fields."""
    migration_content = """/*
    Autogenerated by Wandern, please add your migration SQL here.

    Timestamp: 2024-11-19 00:55:16

    Revision ID: 0003
    Revises: 0002
    Message: add user authentication
    Author: John Doe <john@example.com>
    Tags: auth, security, users
    */

    -- UP
    CREATE TABLE users (id INTEGER PRIMARY KEY);

    -- DOWN
    DROP TABLE users;
    """
    match = REGEX_MIGRATION_PARSER.search(migration_content)
    assert match is not None
    assert match.group("timestamp") == "2024-11-19 00:55:16"
    assert match.group("revision_id") == "0003"
    assert match.group("revises") == "0002"
    assert match.group("message") == "add user authentication"
    assert match.group("tags") == "auth, security, users"
    assert match.group("author") == "John Doe <john@example.com>"
    assert "CREATE TABLE users" in match.group("up_sql")
    assert "DROP TABLE users" in match.group("down_sql")


def test_migration_without_autogenerated_header():
    """Test parsing when user removes the autogenerated header."""
    migration_content = """/*
    Custom header added by user

    Timestamp: 2024-11-19 00:55:16

    Revision ID: 0004
    Revises: 0003
    Message: custom migration
    */

    -- UP
    ALTER TABLE users ADD COLUMN email VARCHAR(255);

    -- DOWN
    ALTER TABLE users DROP COLUMN email;
    """
    match = REGEX_MIGRATION_PARSER.search(migration_content)
    assert match is not None
    assert match.group("timestamp") == "2024-11-19 00:55:16"
    assert match.group("revision_id") == "0004"
    assert match.group("revises") == "0003"
    assert match.group("message") == "custom migration"
    assert "ALTER TABLE users ADD COLUMN" in match.group("up_sql")
    assert "ALTER TABLE users DROP COLUMN" in match.group("down_sql")


def test_migration_with_extra_comments():
    """Test parsing with additional comments and notes in header."""
    migration_content = """/*
    This is a very important migration!
    Please review carefully before applying.

    Timestamp: 2024-11-19 00:55:16
    Note: This timestamp was manually adjusted

    Revision ID: 0005
    Revises: 0004
    Message: critical database changes

    Additional notes:
    - This migration affects performance
    - Run during maintenance window

    Author: Jane Smith
    Tags: critical, performance

    End of header comments
    */

    -- UP
    CREATE INDEX idx_users_email ON users(email);
    -- This index improves login performance

    -- DOWN
    DROP INDEX idx_users_email;
    -- Remove the performance index
    """
    match = REGEX_MIGRATION_PARSER.search(migration_content)
    assert match is not None
    assert match.group("timestamp") == "2024-11-19 00:55:16"
    assert match.group("revision_id") == "0005"
    assert match.group("revises") == "0004"
    assert match.group("message") == "critical database changes"
    assert match.group("tags") == "critical, performance"
    assert match.group("author") == "Jane Smith"
    assert "CREATE INDEX" in match.group("up_sql")
    assert "DROP INDEX" in match.group("down_sql")


def test_migration_with_multiline_message():
    """Test parsing migration with multiline message."""
    migration_content = """/*
    Timestamp: 2024-11-19 00:55:16

    Revision ID: 0006
    Revises: 0005
    Message: complex migration with
    multiple lines in message
    */

    -- UP

    -- DOWN
    """
    match = REGEX_MIGRATION_PARSER.search(migration_content)
    assert match is not None
    assert match.group("revision_id") == "0006"
    # The regex should capture up to the first newline for message
    assert "complex migration with" in match.group("message")


def test_migration_with_complex_sql():
    """Test parsing migration with complex SQL containing comments."""
    migration_content = """/*
    Timestamp: 2024-11-19 00:55:16

    Revision ID: 0007
    Revises: 0006
    Message: complex SQL migration
    */

    -- UP
    /* Create the main table */
    CREATE TABLE products (
        id INTEGER PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        price DECIMAL(10, 2)
    );

    -- Add some initial data
    INSERT INTO products (name, price) VALUES
        ('Product 1', 29.99),
        ('Product 2', 39.99);

    -- DOWN
    /* Clean up in reverse order */
    DROP TABLE products;
    -- Note: This will remove all data!
    """
    match = REGEX_MIGRATION_PARSER.search(migration_content)
    assert match is not None
    assert match.group("revision_id") == "0007"
    assert match.group("message") == "complex SQL migration"

    up_sql = match.group("up_sql")
    down_sql = match.group("down_sql")

    assert "CREATE TABLE products" in up_sql
    assert "INSERT INTO products" in up_sql
    assert "DROP TABLE products" in down_sql
    assert "This will remove all data!" in down_sql


def test_migration_with_unusual_spacing():
    """Test parsing with unusual spacing and formatting."""
    migration_content = """/*


    Timestamp:    2024-11-19 00:55:16


    Revision ID:0008
    Revises:  0007
    Message:   unusual spacing test


    */

    --UP

    SELECT 1;

    --DOWN

    SELECT 0;
    """
    match = REGEX_MIGRATION_PARSER.search(migration_content)
    assert match is not None
    assert match.group("timestamp").strip() == "2024-11-19 00:55:16"
    assert match.group("revision_id") == "0008"
    assert match.group("revises") == "0007"
    assert match.group("message").strip() == "unusual spacing test"


def test_migration_with_tags_only():
    """Test parsing migration with tags but no author."""
    migration_content = """/*
    Timestamp: 2024-11-19 00:55:16

    Revision ID: 0009
    Revises: 0008
    Message: migration with tags only
    Tags: test, tags
    */

    -- UP

    -- DOWN
    """
    match = REGEX_MIGRATION_PARSER.search(migration_content)
    assert match is not None
    assert match.group("tags") == "test, tags"
    assert match.group("author") is None


def test_migration_with_author_only():
    """Test parsing migration with author but no tags."""
    migration_content = """/*
    Timestamp: 2024-11-19 00:55:16

    Revision ID: 0010
    Revises: 0009
    Message: migration with author only
    Author: Test Author
    */

    -- UP

    -- DOWN
    """
    match = REGEX_MIGRATION_PARSER.search(migration_content)
    assert match is not None
    assert match.group("tags") is None
    assert match.group("author") == "Test Author"


def test_migration_with_empty_sql_sections():
    """Test parsing migration with completely empty SQL sections."""
    migration_content = """/*
    Timestamp: 2024-11-19 00:55:16

    Revision ID: 0011
    Revises: 0010
    Message: empty migration
    */

    -- UP

    -- DOWN

    """
    match = REGEX_MIGRATION_PARSER.search(migration_content)
    assert match is not None
    assert match.group("up_sql").strip() == ""
    assert match.group("down_sql").strip() == ""


def test_invalid_migration_missing_fields():
    """Test that regex fails gracefully with missing required fields."""
    migration_content = """/*
    Just some random comment
    */

    -- UP

    -- DOWN
    """
    match = REGEX_MIGRATION_PARSER.search(migration_content)
    assert match is None


def test_migration_with_alphanumeric_revision_ids():
    """Test parsing with alphanumeric revision IDs."""
    migration_content = """/*
    Timestamp: 2024-11-19 00:55:16

    Revision ID: abc123
    Revises: def456
    Message: alphanumeric revision test
    */

    -- UP

    -- DOWN
    """
    match = REGEX_MIGRATION_PARSER.search(migration_content)
    assert match is not None
    assert match.group("revision_id") == "abc123"
    assert match.group("revises") == "def456"


def test_edge_case_special_characters_in_message():
    """Test parsing with special characters in message."""
    migration_content = """/*
    Timestamp: 2024-11-19 00:55:16

    Revision ID: 0012
    Revises: 0011
    Message: migration with special chars: @#$%^&*()
    */

    -- UP

    -- DOWN
    """
    match = REGEX_MIGRATION_PARSER.search(migration_content)
    assert match is not None
    assert match.group("message") == "migration with special chars: @#$%^&*()"


def test_real_world_example():
    """Test with the actual migration file from the project."""
    migration_content = """/*
    Autogenerated by Wandern, please add your migration SQL here.

    Timestamp: 2024-11-19 00:55:16

    Revision ID: 0002
    Revises: 0001
    Message: create table 2
    */

    -- UP

    -- DOWN
    """
    match = REGEX_MIGRATION_PARSER.search(migration_content)
    assert match is not None
    assert match.group("timestamp") == "2024-11-19 00:55:16"
    assert match.group("revision_id") == "0002"
    assert match.group("revises") == "0001"
    assert match.group("message") == "create table 2"
    assert match.group("tags") is None
    assert match.group("author") is None
    assert match.group("up_sql").strip() == ""
    assert match.group("down_sql").strip() == ""


def test_regex_parse_with_groupdict():
    migration_content = """/*
    This is a very important migration!
    Please review carefully before applying.

    Timestamp: 2024-11-19 00:55:16
    Note: This timestamp was manually adjusted

    Revision ID: 0005
    Revises: 0004
    Message: critical database changes

    Additional notes:
    - This migration affects performance
    - Run during maintenance window

    Author: Jane Smith
    Tags: critical, performance

    End of header comments
    */

    -- UP
    CREATE INDEX idx_users_email ON users(email);
    -- This index improves login performance

    -- DOWN
    DROP INDEX idx_users_email;
    -- Remove the performance index
    """

    match = REGEX_MIGRATION_PARSER.search(migration_content)

    assert match
    match_dict = match.groupdict()
    assert match_dict["timestamp"] == "2024-11-19 00:55:16"
    assert match_dict["revision_id"] == "0005"
    assert match_dict["revises"] == "0004"
    assert match_dict["message"] == "critical database changes"
    assert match_dict["author"] == "Jane Smith"
    assert match_dict["tags"] == "critical, performance"


def test_default_constants():
    """Test that default constants have expected values."""
    assert DEFAULT_FILE_FORMAT == "{version}_{slug}_{message}"
    assert DEFAULT_MIGRATION_TABLE == "wd_migrations"
    assert DEFAULT_CONFIG_FILENAME == ".wd.json"


def test_regex_pattern_type():
    """Test that REGEX_MIGRATION_PARSER is a compiled regex pattern."""
    import re

    assert isinstance(REGEX_MIGRATION_PARSER, type(re.compile(r"")))
    assert REGEX_MIGRATION_PARSER.flags & re.DOTALL
    assert REGEX_MIGRATION_PARSER.flags & re.VERBOSE
